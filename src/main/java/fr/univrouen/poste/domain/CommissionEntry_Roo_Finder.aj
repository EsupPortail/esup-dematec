// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package fr.univrouen.poste.domain;

import fr.univrouen.poste.domain.CommissionEntry;
import fr.univrouen.poste.domain.User;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect CommissionEntry_Roo_Finder {
    
    public static Long CommissionEntry.countFindCommissionEntrysByMembre(User membre) {
        if (membre == null) throw new IllegalArgumentException("The membre argument is required");
        EntityManager em = CommissionEntry.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM CommissionEntry AS o WHERE o.membre = :membre", Long.class);
        q.setParameter("membre", membre);
        return ((Long) q.getSingleResult());
    }
    
    public static Long CommissionEntry.countFindCommissionEntrysByMembreIsNull() {
        EntityManager em = CommissionEntry.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM CommissionEntry AS o WHERE o.membre IS NULL", Long.class);
        return ((Long) q.getSingleResult());
    }
    
    public static Long CommissionEntry.countFindCommissionEntrysByNumPosteAndEmail(String numPoste, String email) {
        if (numPoste == null || numPoste.length() == 0) throw new IllegalArgumentException("The numPoste argument is required");
        if (email == null || email.length() == 0) throw new IllegalArgumentException("The email argument is required");
        EntityManager em = CommissionEntry.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM CommissionEntry AS o WHERE o.numPoste = :numPoste AND o.email = :email", Long.class);
        q.setParameter("numPoste", numPoste);
        q.setParameter("email", email);
        return ((Long) q.getSingleResult());
    }
    
    public static Long CommissionEntry.countFindCommissionEntrysByPosteIsNull() {
        EntityManager em = CommissionEntry.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM CommissionEntry AS o WHERE o.poste IS NULL", Long.class);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<CommissionEntry> CommissionEntry.findCommissionEntrysByMembre(User membre) {
        if (membre == null) throw new IllegalArgumentException("The membre argument is required");
        EntityManager em = CommissionEntry.entityManager();
        TypedQuery<CommissionEntry> q = em.createQuery("SELECT o FROM CommissionEntry AS o WHERE o.membre = :membre", CommissionEntry.class);
        q.setParameter("membre", membre);
        return q;
    }
    
    public static TypedQuery<CommissionEntry> CommissionEntry.findCommissionEntrysByMembre(User membre, String sortFieldName, String sortOrder) {
        if (membre == null) throw new IllegalArgumentException("The membre argument is required");
        EntityManager em = CommissionEntry.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM CommissionEntry AS o WHERE o.membre = :membre");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<CommissionEntry> q = em.createQuery(queryBuilder.toString(), CommissionEntry.class);
        q.setParameter("membre", membre);
        return q;
    }
    
    public static TypedQuery<CommissionEntry> CommissionEntry.findCommissionEntrysByMembreIsNull() {
        EntityManager em = CommissionEntry.entityManager();
        TypedQuery<CommissionEntry> q = em.createQuery("SELECT o FROM CommissionEntry AS o WHERE o.membre IS NULL", CommissionEntry.class);
        return q;
    }
    
    public static TypedQuery<CommissionEntry> CommissionEntry.findCommissionEntrysByMembreIsNull(String sortFieldName, String sortOrder) {
        EntityManager em = CommissionEntry.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM CommissionEntry AS o WHERE o.membre IS NULL");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<CommissionEntry> q = em.createQuery(queryBuilder.toString(), CommissionEntry.class);
        return q;
    }
    
    public static TypedQuery<CommissionEntry> CommissionEntry.findCommissionEntrysByNumPosteAndEmail(String numPoste, String email) {
        if (numPoste == null || numPoste.length() == 0) throw new IllegalArgumentException("The numPoste argument is required");
        if (email == null || email.length() == 0) throw new IllegalArgumentException("The email argument is required");
        EntityManager em = CommissionEntry.entityManager();
        TypedQuery<CommissionEntry> q = em.createQuery("SELECT o FROM CommissionEntry AS o WHERE o.numPoste = :numPoste AND o.email = :email", CommissionEntry.class);
        q.setParameter("numPoste", numPoste);
        q.setParameter("email", email);
        return q;
    }
    
    public static TypedQuery<CommissionEntry> CommissionEntry.findCommissionEntrysByNumPosteAndEmail(String numPoste, String email, String sortFieldName, String sortOrder) {
        if (numPoste == null || numPoste.length() == 0) throw new IllegalArgumentException("The numPoste argument is required");
        if (email == null || email.length() == 0) throw new IllegalArgumentException("The email argument is required");
        EntityManager em = CommissionEntry.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM CommissionEntry AS o WHERE o.numPoste = :numPoste AND o.email = :email");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<CommissionEntry> q = em.createQuery(queryBuilder.toString(), CommissionEntry.class);
        q.setParameter("numPoste", numPoste);
        q.setParameter("email", email);
        return q;
    }
    
    public static TypedQuery<CommissionEntry> CommissionEntry.findCommissionEntrysByPosteIsNull() {
        EntityManager em = CommissionEntry.entityManager();
        TypedQuery<CommissionEntry> q = em.createQuery("SELECT o FROM CommissionEntry AS o WHERE o.poste IS NULL", CommissionEntry.class);
        return q;
    }
    
    public static TypedQuery<CommissionEntry> CommissionEntry.findCommissionEntrysByPosteIsNull(String sortFieldName, String sortOrder) {
        EntityManager em = CommissionEntry.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM CommissionEntry AS o WHERE o.poste IS NULL");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<CommissionEntry> q = em.createQuery(queryBuilder.toString(), CommissionEntry.class);
        return q;
    }
    
}
