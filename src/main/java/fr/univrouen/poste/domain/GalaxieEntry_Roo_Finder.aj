// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package fr.univrouen.poste.domain;

import fr.univrouen.poste.domain.GalaxieEntry;
import fr.univrouen.poste.domain.PosteCandidature;
import fr.univrouen.poste.domain.User;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect GalaxieEntry_Roo_Finder {
    
    public static Long GalaxieEntry.countFindGalaxieEntrysByCandidat(User candidat) {
        if (candidat == null) throw new IllegalArgumentException("The candidat argument is required");
        EntityManager em = GalaxieEntry.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM GalaxieEntry AS o WHERE o.candidat = :candidat", Long.class);
        q.setParameter("candidat", candidat);
        return ((Long) q.getSingleResult());
    }
    
    public static Long GalaxieEntry.countFindGalaxieEntrysByCandidatIsNull() {
        EntityManager em = GalaxieEntry.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM GalaxieEntry AS o WHERE o.candidat IS NULL", Long.class);
        return ((Long) q.getSingleResult());
    }
    
    public static Long GalaxieEntry.countFindGalaxieEntrysByCandidature(PosteCandidature candidature) {
        if (candidature == null) throw new IllegalArgumentException("The candidature argument is required");
        EntityManager em = GalaxieEntry.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM GalaxieEntry AS o WHERE o.candidature = :candidature", Long.class);
        q.setParameter("candidature", candidature);
        return ((Long) q.getSingleResult());
    }
    
    public static Long GalaxieEntry.countFindGalaxieEntrysByCandidatureIsNull() {
        EntityManager em = GalaxieEntry.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM GalaxieEntry AS o WHERE o.candidature IS NULL", Long.class);
        return ((Long) q.getSingleResult());
    }
    
    public static Long GalaxieEntry.countFindGalaxieEntrysByNumEmploiAndNumCandidat(String numEmploi, String numCandidat) {
        if (numEmploi == null || numEmploi.length() == 0) throw new IllegalArgumentException("The numEmploi argument is required");
        if (numCandidat == null || numCandidat.length() == 0) throw new IllegalArgumentException("The numCandidat argument is required");
        EntityManager em = GalaxieEntry.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM GalaxieEntry AS o WHERE o.numEmploi = :numEmploi AND o.numCandidat = :numCandidat", Long.class);
        q.setParameter("numEmploi", numEmploi);
        q.setParameter("numCandidat", numCandidat);
        return ((Long) q.getSingleResult());
    }
    
    public static Long GalaxieEntry.countFindGalaxieEntrysByPosteIsNull() {
        EntityManager em = GalaxieEntry.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM GalaxieEntry AS o WHERE o.poste IS NULL", Long.class);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<GalaxieEntry> GalaxieEntry.findGalaxieEntrysByCandidat(User candidat) {
        if (candidat == null) throw new IllegalArgumentException("The candidat argument is required");
        EntityManager em = GalaxieEntry.entityManager();
        TypedQuery<GalaxieEntry> q = em.createQuery("SELECT o FROM GalaxieEntry AS o WHERE o.candidat = :candidat", GalaxieEntry.class);
        q.setParameter("candidat", candidat);
        return q;
    }
    
    public static TypedQuery<GalaxieEntry> GalaxieEntry.findGalaxieEntrysByCandidat(User candidat, String sortFieldName, String sortOrder) {
        if (candidat == null) throw new IllegalArgumentException("The candidat argument is required");
        EntityManager em = GalaxieEntry.entityManager();
        String jpaQuery = "SELECT o FROM GalaxieEntry AS o WHERE o.candidat = :candidat";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<GalaxieEntry> q = em.createQuery(jpaQuery, GalaxieEntry.class);
        q.setParameter("candidat", candidat);
        return q;
    }
    
    public static TypedQuery<GalaxieEntry> GalaxieEntry.findGalaxieEntrysByCandidatIsNull() {
        EntityManager em = GalaxieEntry.entityManager();
        TypedQuery<GalaxieEntry> q = em.createQuery("SELECT o FROM GalaxieEntry AS o WHERE o.candidat IS NULL", GalaxieEntry.class);
        return q;
    }
    
    public static TypedQuery<GalaxieEntry> GalaxieEntry.findGalaxieEntrysByCandidatIsNull(String sortFieldName, String sortOrder) {
        EntityManager em = GalaxieEntry.entityManager();
        String jpaQuery = "SELECT o FROM GalaxieEntry AS o WHERE o.candidat IS NULL";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<GalaxieEntry> q = em.createQuery(jpaQuery, GalaxieEntry.class);
        return q;
    }
    
    public static TypedQuery<GalaxieEntry> GalaxieEntry.findGalaxieEntrysByCandidature(PosteCandidature candidature) {
        if (candidature == null) throw new IllegalArgumentException("The candidature argument is required");
        EntityManager em = GalaxieEntry.entityManager();
        TypedQuery<GalaxieEntry> q = em.createQuery("SELECT o FROM GalaxieEntry AS o WHERE o.candidature = :candidature", GalaxieEntry.class);
        q.setParameter("candidature", candidature);
        return q;
    }
    
    public static TypedQuery<GalaxieEntry> GalaxieEntry.findGalaxieEntrysByCandidature(PosteCandidature candidature, String sortFieldName, String sortOrder) {
        if (candidature == null) throw new IllegalArgumentException("The candidature argument is required");
        EntityManager em = GalaxieEntry.entityManager();
        String jpaQuery = "SELECT o FROM GalaxieEntry AS o WHERE o.candidature = :candidature";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<GalaxieEntry> q = em.createQuery(jpaQuery, GalaxieEntry.class);
        q.setParameter("candidature", candidature);
        return q;
    }
    
    public static TypedQuery<GalaxieEntry> GalaxieEntry.findGalaxieEntrysByCandidatureIsNull() {
        EntityManager em = GalaxieEntry.entityManager();
        TypedQuery<GalaxieEntry> q = em.createQuery("SELECT o FROM GalaxieEntry AS o WHERE o.candidature IS NULL", GalaxieEntry.class);
        return q;
    }
    
    public static TypedQuery<GalaxieEntry> GalaxieEntry.findGalaxieEntrysByCandidatureIsNull(String sortFieldName, String sortOrder) {
        EntityManager em = GalaxieEntry.entityManager();
        String jpaQuery = "SELECT o FROM GalaxieEntry AS o WHERE o.candidature IS NULL";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<GalaxieEntry> q = em.createQuery(jpaQuery, GalaxieEntry.class);
        return q;
    }
    
    public static TypedQuery<GalaxieEntry> GalaxieEntry.findGalaxieEntrysByNumEmploiAndNumCandidat(String numEmploi, String numCandidat) {
        if (numEmploi == null || numEmploi.length() == 0) throw new IllegalArgumentException("The numEmploi argument is required");
        if (numCandidat == null || numCandidat.length() == 0) throw new IllegalArgumentException("The numCandidat argument is required");
        EntityManager em = GalaxieEntry.entityManager();
        TypedQuery<GalaxieEntry> q = em.createQuery("SELECT o FROM GalaxieEntry AS o WHERE o.numEmploi = :numEmploi AND o.numCandidat = :numCandidat", GalaxieEntry.class);
        q.setParameter("numEmploi", numEmploi);
        q.setParameter("numCandidat", numCandidat);
        return q;
    }
    
    public static TypedQuery<GalaxieEntry> GalaxieEntry.findGalaxieEntrysByNumEmploiAndNumCandidat(String numEmploi, String numCandidat, String sortFieldName, String sortOrder) {
        if (numEmploi == null || numEmploi.length() == 0) throw new IllegalArgumentException("The numEmploi argument is required");
        if (numCandidat == null || numCandidat.length() == 0) throw new IllegalArgumentException("The numCandidat argument is required");
        EntityManager em = GalaxieEntry.entityManager();
        String jpaQuery = "SELECT o FROM GalaxieEntry AS o WHERE o.numEmploi = :numEmploi AND o.numCandidat = :numCandidat";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<GalaxieEntry> q = em.createQuery(jpaQuery, GalaxieEntry.class);
        q.setParameter("numEmploi", numEmploi);
        q.setParameter("numCandidat", numCandidat);
        return q;
    }
    
    public static TypedQuery<GalaxieEntry> GalaxieEntry.findGalaxieEntrysByPosteIsNull() {
        EntityManager em = GalaxieEntry.entityManager();
        TypedQuery<GalaxieEntry> q = em.createQuery("SELECT o FROM GalaxieEntry AS o WHERE o.poste IS NULL", GalaxieEntry.class);
        return q;
    }
    
    public static TypedQuery<GalaxieEntry> GalaxieEntry.findGalaxieEntrysByPosteIsNull(String sortFieldName, String sortOrder) {
        EntityManager em = GalaxieEntry.entityManager();
        String jpaQuery = "SELECT o FROM GalaxieEntry AS o WHERE o.poste IS NULL";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<GalaxieEntry> q = em.createQuery(jpaQuery, GalaxieEntry.class);
        return q;
    }
    
}
