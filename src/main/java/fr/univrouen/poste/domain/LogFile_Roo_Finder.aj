// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package fr.univrouen.poste.domain;

import fr.univrouen.poste.domain.LogFile;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect LogFile_Roo_Finder {
    
    public static Long LogFile.countFindLogFilesByActionEquals(String action) {
        if (action == null || action.length() == 0) throw new IllegalArgumentException("The action argument is required");
        EntityManager em = LogFile.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM LogFile AS o WHERE o.action = :action", Long.class);
        q.setParameter("action", action);
        return ((Long) q.getSingleResult());
    }
    
    public static Long LogFile.countFindLogFilesByActionEqualsAndEmailEquals(String action, String email) {
        if (action == null || action.length() == 0) throw new IllegalArgumentException("The action argument is required");
        if (email == null || email.length() == 0) throw new IllegalArgumentException("The email argument is required");
        EntityManager em = LogFile.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM LogFile AS o WHERE o.action = :action  AND o.email = :email", Long.class);
        q.setParameter("action", action);
        q.setParameter("email", email);
        return ((Long) q.getSingleResult());
    }
    
    public static Long LogFile.countFindLogFilesByEmailEquals(String email) {
        if (email == null || email.length() == 0) throw new IllegalArgumentException("The email argument is required");
        EntityManager em = LogFile.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM LogFile AS o WHERE o.email = :email", Long.class);
        q.setParameter("email", email);
        return ((Long) q.getSingleResult());
    }
    
    public static Long LogFile.countFindLogFilesByNumCandidat(String numCandidat) {
        if (numCandidat == null || numCandidat.length() == 0) throw new IllegalArgumentException("The numCandidat argument is required");
        EntityManager em = LogFile.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM LogFile AS o WHERE o.numCandidat = :numCandidat", Long.class);
        q.setParameter("numCandidat", numCandidat);
        return ((Long) q.getSingleResult());
    }
    
    public static Long LogFile.countFindLogFilesByNumEmploi(String numEmploi) {
        if (numEmploi == null || numEmploi.length() == 0) throw new IllegalArgumentException("The numEmploi argument is required");
        EntityManager em = LogFile.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM LogFile AS o WHERE o.numEmploi = :numEmploi", Long.class);
        q.setParameter("numEmploi", numEmploi);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<LogFile> LogFile.findLogFilesByActionEquals(String action) {
        if (action == null || action.length() == 0) throw new IllegalArgumentException("The action argument is required");
        EntityManager em = LogFile.entityManager();
        TypedQuery<LogFile> q = em.createQuery("SELECT o FROM LogFile AS o WHERE o.action = :action", LogFile.class);
        q.setParameter("action", action);
        return q;
    }
    
    public static TypedQuery<LogFile> LogFile.findLogFilesByActionEquals(String action, String sortFieldName, String sortOrder) {
        if (action == null || action.length() == 0) throw new IllegalArgumentException("The action argument is required");
        EntityManager em = LogFile.entityManager();
        String jpaQuery = "SELECT o FROM LogFile AS o WHERE o.action = :action";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<LogFile> q = em.createQuery(jpaQuery, LogFile.class);
        q.setParameter("action", action);
        return q;
    }
    
    public static TypedQuery<LogFile> LogFile.findLogFilesByActionEqualsAndEmailEquals(String action, String email) {
        if (action == null || action.length() == 0) throw new IllegalArgumentException("The action argument is required");
        if (email == null || email.length() == 0) throw new IllegalArgumentException("The email argument is required");
        EntityManager em = LogFile.entityManager();
        TypedQuery<LogFile> q = em.createQuery("SELECT o FROM LogFile AS o WHERE o.action = :action  AND o.email = :email", LogFile.class);
        q.setParameter("action", action);
        q.setParameter("email", email);
        return q;
    }
    
    public static TypedQuery<LogFile> LogFile.findLogFilesByActionEqualsAndEmailEquals(String action, String email, String sortFieldName, String sortOrder) {
        if (action == null || action.length() == 0) throw new IllegalArgumentException("The action argument is required");
        if (email == null || email.length() == 0) throw new IllegalArgumentException("The email argument is required");
        EntityManager em = LogFile.entityManager();
        String jpaQuery = "SELECT o FROM LogFile AS o WHERE o.action = :action  AND o.email = :email";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<LogFile> q = em.createQuery(jpaQuery, LogFile.class);
        q.setParameter("action", action);
        q.setParameter("email", email);
        return q;
    }
    
    public static TypedQuery<LogFile> LogFile.findLogFilesByEmailEquals(String email) {
        if (email == null || email.length() == 0) throw new IllegalArgumentException("The email argument is required");
        EntityManager em = LogFile.entityManager();
        TypedQuery<LogFile> q = em.createQuery("SELECT o FROM LogFile AS o WHERE o.email = :email", LogFile.class);
        q.setParameter("email", email);
        return q;
    }
    
    public static TypedQuery<LogFile> LogFile.findLogFilesByEmailEquals(String email, String sortFieldName, String sortOrder) {
        if (email == null || email.length() == 0) throw new IllegalArgumentException("The email argument is required");
        EntityManager em = LogFile.entityManager();
        String jpaQuery = "SELECT o FROM LogFile AS o WHERE o.email = :email";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<LogFile> q = em.createQuery(jpaQuery, LogFile.class);
        q.setParameter("email", email);
        return q;
    }
    
    public static TypedQuery<LogFile> LogFile.findLogFilesByNumCandidat(String numCandidat) {
        if (numCandidat == null || numCandidat.length() == 0) throw new IllegalArgumentException("The numCandidat argument is required");
        EntityManager em = LogFile.entityManager();
        TypedQuery<LogFile> q = em.createQuery("SELECT o FROM LogFile AS o WHERE o.numCandidat = :numCandidat", LogFile.class);
        q.setParameter("numCandidat", numCandidat);
        return q;
    }
    
    public static TypedQuery<LogFile> LogFile.findLogFilesByNumCandidat(String numCandidat, String sortFieldName, String sortOrder) {
        if (numCandidat == null || numCandidat.length() == 0) throw new IllegalArgumentException("The numCandidat argument is required");
        EntityManager em = LogFile.entityManager();
        String jpaQuery = "SELECT o FROM LogFile AS o WHERE o.numCandidat = :numCandidat";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<LogFile> q = em.createQuery(jpaQuery, LogFile.class);
        q.setParameter("numCandidat", numCandidat);
        return q;
    }
    
    public static TypedQuery<LogFile> LogFile.findLogFilesByNumEmploi(String numEmploi) {
        if (numEmploi == null || numEmploi.length() == 0) throw new IllegalArgumentException("The numEmploi argument is required");
        EntityManager em = LogFile.entityManager();
        TypedQuery<LogFile> q = em.createQuery("SELECT o FROM LogFile AS o WHERE o.numEmploi = :numEmploi", LogFile.class);
        q.setParameter("numEmploi", numEmploi);
        return q;
    }
    
    public static TypedQuery<LogFile> LogFile.findLogFilesByNumEmploi(String numEmploi, String sortFieldName, String sortOrder) {
        if (numEmploi == null || numEmploi.length() == 0) throw new IllegalArgumentException("The numEmploi argument is required");
        EntityManager em = LogFile.entityManager();
        String jpaQuery = "SELECT o FROM LogFile AS o WHERE o.numEmploi = :numEmploi";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<LogFile> q = em.createQuery(jpaQuery, LogFile.class);
        q.setParameter("numEmploi", numEmploi);
        return q;
    }
    
}
