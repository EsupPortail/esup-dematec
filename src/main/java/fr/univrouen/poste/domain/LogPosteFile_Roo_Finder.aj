// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package fr.univrouen.poste.domain;

import fr.univrouen.poste.domain.LogPosteFile;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect LogPosteFile_Roo_Finder {
    
    public static Long LogPosteFile.countFindLogPosteFilesByActionEquals(String action) {
        if (action == null || action.length() == 0) throw new IllegalArgumentException("The action argument is required");
        EntityManager em = LogPosteFile.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM LogPosteFile AS o WHERE o.action = :action", Long.class);
        q.setParameter("action", action);
        return ((Long) q.getSingleResult());
    }
    
    public static Long LogPosteFile.countFindLogPosteFilesByActionEqualsAndEmailEquals(String action, String email) {
        if (action == null || action.length() == 0) throw new IllegalArgumentException("The action argument is required");
        if (email == null || email.length() == 0) throw new IllegalArgumentException("The email argument is required");
        EntityManager em = LogPosteFile.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM LogPosteFile AS o WHERE o.action = :action  AND o.email = :email", Long.class);
        q.setParameter("action", action);
        q.setParameter("email", email);
        return ((Long) q.getSingleResult());
    }
    
    public static Long LogPosteFile.countFindLogPosteFilesByEmailEquals(String email) {
        if (email == null || email.length() == 0) throw new IllegalArgumentException("The email argument is required");
        EntityManager em = LogPosteFile.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM LogPosteFile AS o WHERE o.email = :email", Long.class);
        q.setParameter("email", email);
        return ((Long) q.getSingleResult());
    }
    
    public static Long LogPosteFile.countFindLogPosteFilesByNumEmploi(String numEmploi) {
        if (numEmploi == null || numEmploi.length() == 0) throw new IllegalArgumentException("The numEmploi argument is required");
        EntityManager em = LogPosteFile.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM LogPosteFile AS o WHERE o.numEmploi = :numEmploi", Long.class);
        q.setParameter("numEmploi", numEmploi);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<LogPosteFile> LogPosteFile.findLogPosteFilesByActionEquals(String action) {
        if (action == null || action.length() == 0) throw new IllegalArgumentException("The action argument is required");
        EntityManager em = LogPosteFile.entityManager();
        TypedQuery<LogPosteFile> q = em.createQuery("SELECT o FROM LogPosteFile AS o WHERE o.action = :action", LogPosteFile.class);
        q.setParameter("action", action);
        return q;
    }
    
    public static TypedQuery<LogPosteFile> LogPosteFile.findLogPosteFilesByActionEquals(String action, String sortFieldName, String sortOrder) {
        if (action == null || action.length() == 0) throw new IllegalArgumentException("The action argument is required");
        EntityManager em = LogPosteFile.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM LogPosteFile AS o WHERE o.action = :action");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<LogPosteFile> q = em.createQuery(queryBuilder.toString(), LogPosteFile.class);
        q.setParameter("action", action);
        return q;
    }
    
    public static TypedQuery<LogPosteFile> LogPosteFile.findLogPosteFilesByActionEqualsAndEmailEquals(String action, String email) {
        if (action == null || action.length() == 0) throw new IllegalArgumentException("The action argument is required");
        if (email == null || email.length() == 0) throw new IllegalArgumentException("The email argument is required");
        EntityManager em = LogPosteFile.entityManager();
        TypedQuery<LogPosteFile> q = em.createQuery("SELECT o FROM LogPosteFile AS o WHERE o.action = :action  AND o.email = :email", LogPosteFile.class);
        q.setParameter("action", action);
        q.setParameter("email", email);
        return q;
    }
    
    public static TypedQuery<LogPosteFile> LogPosteFile.findLogPosteFilesByActionEqualsAndEmailEquals(String action, String email, String sortFieldName, String sortOrder) {
        if (action == null || action.length() == 0) throw new IllegalArgumentException("The action argument is required");
        if (email == null || email.length() == 0) throw new IllegalArgumentException("The email argument is required");
        EntityManager em = LogPosteFile.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM LogPosteFile AS o WHERE o.action = :action  AND o.email = :email");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<LogPosteFile> q = em.createQuery(queryBuilder.toString(), LogPosteFile.class);
        q.setParameter("action", action);
        q.setParameter("email", email);
        return q;
    }
    
    public static TypedQuery<LogPosteFile> LogPosteFile.findLogPosteFilesByEmailEquals(String email) {
        if (email == null || email.length() == 0) throw new IllegalArgumentException("The email argument is required");
        EntityManager em = LogPosteFile.entityManager();
        TypedQuery<LogPosteFile> q = em.createQuery("SELECT o FROM LogPosteFile AS o WHERE o.email = :email", LogPosteFile.class);
        q.setParameter("email", email);
        return q;
    }
    
    public static TypedQuery<LogPosteFile> LogPosteFile.findLogPosteFilesByEmailEquals(String email, String sortFieldName, String sortOrder) {
        if (email == null || email.length() == 0) throw new IllegalArgumentException("The email argument is required");
        EntityManager em = LogPosteFile.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM LogPosteFile AS o WHERE o.email = :email");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<LogPosteFile> q = em.createQuery(queryBuilder.toString(), LogPosteFile.class);
        q.setParameter("email", email);
        return q;
    }
    
    public static TypedQuery<LogPosteFile> LogPosteFile.findLogPosteFilesByNumEmploi(String numEmploi) {
        if (numEmploi == null || numEmploi.length() == 0) throw new IllegalArgumentException("The numEmploi argument is required");
        EntityManager em = LogPosteFile.entityManager();
        TypedQuery<LogPosteFile> q = em.createQuery("SELECT o FROM LogPosteFile AS o WHERE o.numEmploi = :numEmploi", LogPosteFile.class);
        q.setParameter("numEmploi", numEmploi);
        return q;
    }
    
    public static TypedQuery<LogPosteFile> LogPosteFile.findLogPosteFilesByNumEmploi(String numEmploi, String sortFieldName, String sortOrder) {
        if (numEmploi == null || numEmploi.length() == 0) throw new IllegalArgumentException("The numEmploi argument is required");
        EntityManager em = LogPosteFile.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM LogPosteFile AS o WHERE o.numEmploi = :numEmploi");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<LogPosteFile> q = em.createQuery(queryBuilder.toString(), LogPosteFile.class);
        q.setParameter("numEmploi", numEmploi);
        return q;
    }
    
}
