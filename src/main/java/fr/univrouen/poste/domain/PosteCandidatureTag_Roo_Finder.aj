// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package fr.univrouen.poste.domain;

import fr.univrouen.poste.domain.PosteCandidatureTag;
import fr.univrouen.poste.domain.PosteCandidatureTagValue;
import java.util.Set;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect PosteCandidatureTag_Roo_Finder {
    
    public static Long PosteCandidatureTag.countFindPosteCandidatureTagsByValues(Set<PosteCandidatureTagValue> values) {
        if (values == null) throw new IllegalArgumentException("The values argument is required");
        EntityManager em = PosteCandidatureTag.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT COUNT(o) FROM PosteCandidatureTag AS o WHERE");
        for (int i = 0; i < values.size(); i++) {
            if (i > 0) queryBuilder.append(" AND");
            queryBuilder.append(" :values_item").append(i).append(" MEMBER OF o.values");
        }
        TypedQuery q = em.createQuery(queryBuilder.toString(), Long.class);
        int valuesIndex = 0;
        for (PosteCandidatureTagValue _postecandidaturetagvalue: values) {
            q.setParameter("values_item" + valuesIndex++, _postecandidaturetagvalue);
        }
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<PosteCandidatureTag> PosteCandidatureTag.findPosteCandidatureTagsByValues(Set<PosteCandidatureTagValue> values) {
        if (values == null) throw new IllegalArgumentException("The values argument is required");
        EntityManager em = PosteCandidatureTag.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM PosteCandidatureTag AS o WHERE");
        for (int i = 0; i < values.size(); i++) {
            if (i > 0) queryBuilder.append(" AND");
            queryBuilder.append(" :values_item").append(i).append(" MEMBER OF o.values");
        }
        TypedQuery<PosteCandidatureTag> q = em.createQuery(queryBuilder.toString(), PosteCandidatureTag.class);
        int valuesIndex = 0;
        for (PosteCandidatureTagValue _postecandidaturetagvalue: values) {
            q.setParameter("values_item" + valuesIndex++, _postecandidaturetagvalue);
        }
        return q;
    }
    
    public static TypedQuery<PosteCandidatureTag> PosteCandidatureTag.findPosteCandidatureTagsByValues(Set<PosteCandidatureTagValue> values, String sortFieldName, String sortOrder) {
        if (values == null) throw new IllegalArgumentException("The values argument is required");
        EntityManager em = PosteCandidatureTag.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM PosteCandidatureTag AS o WHERE");
        for (int i = 0; i < values.size(); i++) {
            if (i > 0) queryBuilder.append(" AND");
            queryBuilder.append(" :values_item").append(i).append(" MEMBER OF o.values");
        }
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" " + sortOrder);
            }
        }
        TypedQuery<PosteCandidatureTag> q = em.createQuery(queryBuilder.toString(), PosteCandidatureTag.class);
        int valuesIndex = 0;
        for (PosteCandidatureTagValue _postecandidaturetagvalue: values) {
            q.setParameter("values_item" + valuesIndex++, _postecandidaturetagvalue);
        }
        return q;
    }
    
}
