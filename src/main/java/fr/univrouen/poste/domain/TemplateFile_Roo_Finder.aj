// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package fr.univrouen.poste.domain;

import fr.univrouen.poste.domain.TemplateFile;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect TemplateFile_Roo_Finder {
    
    public static Long TemplateFile.countFindTemplateFilesByTemplateFileType(TemplateFileType templateFileType) {
        if (templateFileType == null) throw new IllegalArgumentException("The templateFileType argument is required");
        EntityManager em = TemplateFile.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM TemplateFile AS o WHERE o.templateFileType = :templateFileType", Long.class);
        q.setParameter("templateFileType", templateFileType);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<TemplateFile> TemplateFile.findTemplateFilesByTemplateFileType(TemplateFileType templateFileType) {
        if (templateFileType == null) throw new IllegalArgumentException("The templateFileType argument is required");
        EntityManager em = TemplateFile.entityManager();
        TypedQuery<TemplateFile> q = em.createQuery("SELECT o FROM TemplateFile AS o WHERE o.templateFileType = :templateFileType", TemplateFile.class);
        q.setParameter("templateFileType", templateFileType);
        return q;
    }
    
    public static TypedQuery<TemplateFile> TemplateFile.findTemplateFilesByTemplateFileType(TemplateFileType templateFileType, String sortFieldName, String sortOrder) {
        if (templateFileType == null) throw new IllegalArgumentException("The templateFileType argument is required");
        EntityManager em = TemplateFile.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM TemplateFile AS o WHERE o.templateFileType = :templateFileType");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<TemplateFile> q = em.createQuery(queryBuilder.toString(), TemplateFile.class);
        q.setParameter("templateFileType", templateFileType);
        return q;
    }
    
}
