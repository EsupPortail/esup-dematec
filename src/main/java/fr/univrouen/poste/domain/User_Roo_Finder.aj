// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package fr.univrouen.poste.domain;

import fr.univrouen.poste.domain.User;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect User_Roo_Finder {
    
    public static Long User.countFindUsersByActivationKey(String activationKey) {
        if (activationKey == null || activationKey.length() == 0) throw new IllegalArgumentException("The activationKey argument is required");
        EntityManager em = User.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM User AS o WHERE o.activationKey = :activationKey", Long.class);
        q.setParameter("activationKey", activationKey);
        return ((Long) q.getSingleResult());
    }
    
    public static Long User.countFindUsersByActivationKeyAndEmailAddress(String activationKey, String emailAddress) {
        if (activationKey == null || activationKey.length() == 0) throw new IllegalArgumentException("The activationKey argument is required");
        if (emailAddress == null || emailAddress.length() == 0) throw new IllegalArgumentException("The emailAddress argument is required");
        EntityManager em = User.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM User AS o WHERE o.activationKey = :activationKey AND o.emailAddress = :emailAddress", Long.class);
        q.setParameter("activationKey", activationKey);
        q.setParameter("emailAddress", emailAddress);
        return ((Long) q.getSingleResult());
    }
    
    public static Long User.countFindUsersByEmailAddress(String emailAddress) {
        if (emailAddress == null || emailAddress.length() == 0) throw new IllegalArgumentException("The emailAddress argument is required");
        EntityManager em = User.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM User AS o WHERE o.emailAddress = :emailAddress", Long.class);
        q.setParameter("emailAddress", emailAddress);
        return ((Long) q.getSingleResult());
    }
    
    public static Long User.countFindUsersByEmailAddressAndActivationDateIsNotNull(String emailAddress) {
        if (emailAddress == null || emailAddress.length() == 0) throw new IllegalArgumentException("The emailAddress argument is required");
        EntityManager em = User.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM User AS o WHERE o.emailAddress = :emailAddress AND o.activationDate IS NOT NULL", Long.class);
        q.setParameter("emailAddress", emailAddress);
        return ((Long) q.getSingleResult());
    }
    
    public static Long User.countFindUsersByIsAdmin(Boolean isAdmin) {
        if (isAdmin == null) throw new IllegalArgumentException("The isAdmin argument is required");
        EntityManager em = User.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM User AS o WHERE o.isAdmin = :isAdmin", Long.class);
        q.setParameter("isAdmin", isAdmin);
        return ((Long) q.getSingleResult());
    }
    
    public static Long User.countFindUsersByIsManager(Boolean isManager) {
        if (isManager == null) throw new IllegalArgumentException("The isManager argument is required");
        EntityManager em = User.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM User AS o WHERE o.isManager = :isManager", Long.class);
        q.setParameter("isManager", isManager);
        return ((Long) q.getSingleResult());
    }
    
    public static Long User.countFindUsersByIsSuperManager(Boolean isSuperManager) {
        if (isSuperManager == null) throw new IllegalArgumentException("The isSuperManager argument is required");
        EntityManager em = User.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM User AS o WHERE o.isSuperManager = :isSuperManager", Long.class);
        q.setParameter("isSuperManager", isSuperManager);
        return ((Long) q.getSingleResult());
    }
    
    public static Long User.countFindUsersByNomLikeOrEmailAddressLikeOrPrenomLike(String nom, String emailAddress, String prenom) {
        if (nom == null || nom.length() == 0) throw new IllegalArgumentException("The nom argument is required");
        nom = nom.replace('*', '%');
        if (nom.charAt(0) != '%') {
            nom = "%" + nom;
        }
        if (nom.charAt(nom.length() - 1) != '%') {
            nom = nom + "%";
        }
        if (emailAddress == null || emailAddress.length() == 0) throw new IllegalArgumentException("The emailAddress argument is required");
        emailAddress = emailAddress.replace('*', '%');
        if (emailAddress.charAt(0) != '%') {
            emailAddress = "%" + emailAddress;
        }
        if (emailAddress.charAt(emailAddress.length() - 1) != '%') {
            emailAddress = emailAddress + "%";
        }
        if (prenom == null || prenom.length() == 0) throw new IllegalArgumentException("The prenom argument is required");
        prenom = prenom.replace('*', '%');
        if (prenom.charAt(0) != '%') {
            prenom = "%" + prenom;
        }
        if (prenom.charAt(prenom.length() - 1) != '%') {
            prenom = prenom + "%";
        }
        EntityManager em = User.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM User AS o WHERE LOWER(o.nom) LIKE LOWER(:nom)  OR LOWER(o.emailAddress) LIKE LOWER(:emailAddress)  OR LOWER(o.prenom) LIKE LOWER(:prenom)", Long.class);
        q.setParameter("nom", nom);
        q.setParameter("emailAddress", emailAddress);
        q.setParameter("prenom", prenom);
        return ((Long) q.getSingleResult());
    }
    
    public static Long User.countFindUsersByNumCandidat(String numCandidat) {
        if (numCandidat == null || numCandidat.length() == 0) throw new IllegalArgumentException("The numCandidat argument is required");
        EntityManager em = User.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM User AS o WHERE o.numCandidat = :numCandidat", Long.class);
        q.setParameter("numCandidat", numCandidat);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<User> User.findUsersByActivationKey(String activationKey) {
        if (activationKey == null || activationKey.length() == 0) throw new IllegalArgumentException("The activationKey argument is required");
        EntityManager em = User.entityManager();
        TypedQuery<User> q = em.createQuery("SELECT o FROM User AS o WHERE o.activationKey = :activationKey", User.class);
        q.setParameter("activationKey", activationKey);
        return q;
    }
    
    public static TypedQuery<User> User.findUsersByActivationKey(String activationKey, String sortFieldName, String sortOrder) {
        if (activationKey == null || activationKey.length() == 0) throw new IllegalArgumentException("The activationKey argument is required");
        EntityManager em = User.entityManager();
        String jpaQuery = "SELECT o FROM User AS o WHERE o.activationKey = :activationKey";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<User> q = em.createQuery(jpaQuery, User.class);
        q.setParameter("activationKey", activationKey);
        return q;
    }
    
    public static TypedQuery<User> User.findUsersByActivationKeyAndEmailAddress(String activationKey, String emailAddress) {
        if (activationKey == null || activationKey.length() == 0) throw new IllegalArgumentException("The activationKey argument is required");
        if (emailAddress == null || emailAddress.length() == 0) throw new IllegalArgumentException("The emailAddress argument is required");
        EntityManager em = User.entityManager();
        TypedQuery<User> q = em.createQuery("SELECT o FROM User AS o WHERE o.activationKey = :activationKey AND o.emailAddress = :emailAddress", User.class);
        q.setParameter("activationKey", activationKey);
        q.setParameter("emailAddress", emailAddress);
        return q;
    }
    
    public static TypedQuery<User> User.findUsersByActivationKeyAndEmailAddress(String activationKey, String emailAddress, String sortFieldName, String sortOrder) {
        if (activationKey == null || activationKey.length() == 0) throw new IllegalArgumentException("The activationKey argument is required");
        if (emailAddress == null || emailAddress.length() == 0) throw new IllegalArgumentException("The emailAddress argument is required");
        EntityManager em = User.entityManager();
        String jpaQuery = "SELECT o FROM User AS o WHERE o.activationKey = :activationKey AND o.emailAddress = :emailAddress";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<User> q = em.createQuery(jpaQuery, User.class);
        q.setParameter("activationKey", activationKey);
        q.setParameter("emailAddress", emailAddress);
        return q;
    }
    
    public static TypedQuery<User> User.findUsersByEmailAddress(String emailAddress) {
        if (emailAddress == null || emailAddress.length() == 0) throw new IllegalArgumentException("The emailAddress argument is required");
        EntityManager em = User.entityManager();
        TypedQuery<User> q = em.createQuery("SELECT o FROM User AS o WHERE o.emailAddress = :emailAddress", User.class);
        q.setParameter("emailAddress", emailAddress);
        return q;
    }
    
    public static TypedQuery<User> User.findUsersByEmailAddress(String emailAddress, String sortFieldName, String sortOrder) {
        if (emailAddress == null || emailAddress.length() == 0) throw new IllegalArgumentException("The emailAddress argument is required");
        EntityManager em = User.entityManager();
        String jpaQuery = "SELECT o FROM User AS o WHERE o.emailAddress = :emailAddress";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<User> q = em.createQuery(jpaQuery, User.class);
        q.setParameter("emailAddress", emailAddress);
        return q;
    }
    
    public static TypedQuery<User> User.findUsersByEmailAddressAndActivationDateIsNotNull(String emailAddress) {
        if (emailAddress == null || emailAddress.length() == 0) throw new IllegalArgumentException("The emailAddress argument is required");
        EntityManager em = User.entityManager();
        TypedQuery<User> q = em.createQuery("SELECT o FROM User AS o WHERE o.emailAddress = :emailAddress AND o.activationDate IS NOT NULL", User.class);
        q.setParameter("emailAddress", emailAddress);
        return q;
    }
    
    public static TypedQuery<User> User.findUsersByEmailAddressAndActivationDateIsNotNull(String emailAddress, String sortFieldName, String sortOrder) {
        if (emailAddress == null || emailAddress.length() == 0) throw new IllegalArgumentException("The emailAddress argument is required");
        EntityManager em = User.entityManager();
        String jpaQuery = "SELECT o FROM User AS o WHERE o.emailAddress = :emailAddress AND o.activationDate IS NOT NULL";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<User> q = em.createQuery(jpaQuery, User.class);
        q.setParameter("emailAddress", emailAddress);
        return q;
    }
    
    public static TypedQuery<User> User.findUsersByIsAdmin(Boolean isAdmin) {
        if (isAdmin == null) throw new IllegalArgumentException("The isAdmin argument is required");
        EntityManager em = User.entityManager();
        TypedQuery<User> q = em.createQuery("SELECT o FROM User AS o WHERE o.isAdmin = :isAdmin", User.class);
        q.setParameter("isAdmin", isAdmin);
        return q;
    }
    
    public static TypedQuery<User> User.findUsersByIsAdmin(Boolean isAdmin, String sortFieldName, String sortOrder) {
        if (isAdmin == null) throw new IllegalArgumentException("The isAdmin argument is required");
        EntityManager em = User.entityManager();
        String jpaQuery = "SELECT o FROM User AS o WHERE o.isAdmin = :isAdmin";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<User> q = em.createQuery(jpaQuery, User.class);
        q.setParameter("isAdmin", isAdmin);
        return q;
    }
    
    public static TypedQuery<User> User.findUsersByIsManager(Boolean isManager) {
        if (isManager == null) throw new IllegalArgumentException("The isManager argument is required");
        EntityManager em = User.entityManager();
        TypedQuery<User> q = em.createQuery("SELECT o FROM User AS o WHERE o.isManager = :isManager", User.class);
        q.setParameter("isManager", isManager);
        return q;
    }
    
    public static TypedQuery<User> User.findUsersByIsManager(Boolean isManager, String sortFieldName, String sortOrder) {
        if (isManager == null) throw new IllegalArgumentException("The isManager argument is required");
        EntityManager em = User.entityManager();
        String jpaQuery = "SELECT o FROM User AS o WHERE o.isManager = :isManager";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<User> q = em.createQuery(jpaQuery, User.class);
        q.setParameter("isManager", isManager);
        return q;
    }
    
    public static TypedQuery<User> User.findUsersByIsSuperManager(Boolean isSuperManager) {
        if (isSuperManager == null) throw new IllegalArgumentException("The isSuperManager argument is required");
        EntityManager em = User.entityManager();
        TypedQuery<User> q = em.createQuery("SELECT o FROM User AS o WHERE o.isSuperManager = :isSuperManager", User.class);
        q.setParameter("isSuperManager", isSuperManager);
        return q;
    }
    
    public static TypedQuery<User> User.findUsersByIsSuperManager(Boolean isSuperManager, String sortFieldName, String sortOrder) {
        if (isSuperManager == null) throw new IllegalArgumentException("The isSuperManager argument is required");
        EntityManager em = User.entityManager();
        String jpaQuery = "SELECT o FROM User AS o WHERE o.isSuperManager = :isSuperManager";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<User> q = em.createQuery(jpaQuery, User.class);
        q.setParameter("isSuperManager", isSuperManager);
        return q;
    }
    
    public static TypedQuery<User> User.findUsersByNomLikeOrEmailAddressLikeOrPrenomLike(String nom, String emailAddress, String prenom) {
        if (nom == null || nom.length() == 0) throw new IllegalArgumentException("The nom argument is required");
        nom = nom.replace('*', '%');
        if (nom.charAt(0) != '%') {
            nom = "%" + nom;
        }
        if (nom.charAt(nom.length() - 1) != '%') {
            nom = nom + "%";
        }
        if (emailAddress == null || emailAddress.length() == 0) throw new IllegalArgumentException("The emailAddress argument is required");
        emailAddress = emailAddress.replace('*', '%');
        if (emailAddress.charAt(0) != '%') {
            emailAddress = "%" + emailAddress;
        }
        if (emailAddress.charAt(emailAddress.length() - 1) != '%') {
            emailAddress = emailAddress + "%";
        }
        if (prenom == null || prenom.length() == 0) throw new IllegalArgumentException("The prenom argument is required");
        prenom = prenom.replace('*', '%');
        if (prenom.charAt(0) != '%') {
            prenom = "%" + prenom;
        }
        if (prenom.charAt(prenom.length() - 1) != '%') {
            prenom = prenom + "%";
        }
        EntityManager em = User.entityManager();
        TypedQuery<User> q = em.createQuery("SELECT o FROM User AS o WHERE LOWER(o.nom) LIKE LOWER(:nom)  OR LOWER(o.emailAddress) LIKE LOWER(:emailAddress)  OR LOWER(o.prenom) LIKE LOWER(:prenom)", User.class);
        q.setParameter("nom", nom);
        q.setParameter("emailAddress", emailAddress);
        q.setParameter("prenom", prenom);
        return q;
    }
    
    public static TypedQuery<User> User.findUsersByNomLikeOrEmailAddressLikeOrPrenomLike(String nom, String emailAddress, String prenom, String sortFieldName, String sortOrder) {
        if (nom == null || nom.length() == 0) throw new IllegalArgumentException("The nom argument is required");
        nom = nom.replace('*', '%');
        if (nom.charAt(0) != '%') {
            nom = "%" + nom;
        }
        if (nom.charAt(nom.length() - 1) != '%') {
            nom = nom + "%";
        }
        if (emailAddress == null || emailAddress.length() == 0) throw new IllegalArgumentException("The emailAddress argument is required");
        emailAddress = emailAddress.replace('*', '%');
        if (emailAddress.charAt(0) != '%') {
            emailAddress = "%" + emailAddress;
        }
        if (emailAddress.charAt(emailAddress.length() - 1) != '%') {
            emailAddress = emailAddress + "%";
        }
        if (prenom == null || prenom.length() == 0) throw new IllegalArgumentException("The prenom argument is required");
        prenom = prenom.replace('*', '%');
        if (prenom.charAt(0) != '%') {
            prenom = "%" + prenom;
        }
        if (prenom.charAt(prenom.length() - 1) != '%') {
            prenom = prenom + "%";
        }
        EntityManager em = User.entityManager();
        String jpaQuery = "SELECT o FROM User AS o WHERE LOWER(o.nom) LIKE LOWER(:nom)  OR LOWER(o.emailAddress) LIKE LOWER(:emailAddress)  OR LOWER(o.prenom) LIKE LOWER(:prenom)";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<User> q = em.createQuery(jpaQuery, User.class);
        q.setParameter("nom", nom);
        q.setParameter("emailAddress", emailAddress);
        q.setParameter("prenom", prenom);
        return q;
    }
    
    public static TypedQuery<User> User.findUsersByNumCandidat(String numCandidat) {
        if (numCandidat == null || numCandidat.length() == 0) throw new IllegalArgumentException("The numCandidat argument is required");
        EntityManager em = User.entityManager();
        TypedQuery<User> q = em.createQuery("SELECT o FROM User AS o WHERE o.numCandidat = :numCandidat", User.class);
        q.setParameter("numCandidat", numCandidat);
        return q;
    }
    
    public static TypedQuery<User> User.findUsersByNumCandidat(String numCandidat, String sortFieldName, String sortOrder) {
        if (numCandidat == null || numCandidat.length() == 0) throw new IllegalArgumentException("The numCandidat argument is required");
        EntityManager em = User.entityManager();
        String jpaQuery = "SELECT o FROM User AS o WHERE o.numCandidat = :numCandidat";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<User> q = em.createQuery(jpaQuery, User.class);
        q.setParameter("numCandidat", numCandidat);
        return q;
    }
    
}
