// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package fr.univrouen.poste.web.admin;

import fr.univrouen.poste.domain.LogFile;
import fr.univrouen.poste.web.admin.LogFileController;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

privileged aspect LogFileController_Roo_Controller_Finder {
    
    @RequestMapping(params = { "find=ByActionEquals", "form" }, method = RequestMethod.GET)
    public String LogFileController.findLogFilesByActionEqualsForm(Model uiModel) {
        return "admin/logfiles/findLogFilesByActionEquals";
    }
    
    @RequestMapping(params = "find=ByActionEquals", method = RequestMethod.GET)
    public String LogFileController.findLogFilesByActionEquals(@RequestParam("action") String action, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("logfiles", LogFile.findLogFilesByActionEquals(action).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) LogFile.countFindLogFilesByActionEquals(action) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("logfiles", LogFile.findLogFilesByActionEquals(action).getResultList());
        }
        addDateTimeFormatPatterns(uiModel);
        return "admin/logfiles/list";
    }
    
    @RequestMapping(params = { "find=ByNumCandidat", "form" }, method = RequestMethod.GET)
    public String LogFileController.findLogFilesByNumCandidatForm(Model uiModel) {
        return "admin/logfiles/findLogFilesByNumCandidat";
    }
    
    @RequestMapping(params = "find=ByNumCandidat", method = RequestMethod.GET)
    public String LogFileController.findLogFilesByNumCandidat(@RequestParam("numCandidat") String numCandidat, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("logfiles", LogFile.findLogFilesByNumCandidat(numCandidat).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) LogFile.countFindLogFilesByNumCandidat(numCandidat) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("logfiles", LogFile.findLogFilesByNumCandidat(numCandidat).getResultList());
        }
        addDateTimeFormatPatterns(uiModel);
        return "admin/logfiles/list";
    }
    
    @RequestMapping(params = { "find=ByNumEmploi", "form" }, method = RequestMethod.GET)
    public String LogFileController.findLogFilesByNumEmploiForm(Model uiModel) {
        return "admin/logfiles/findLogFilesByNumEmploi";
    }
    
    @RequestMapping(params = "find=ByNumEmploi", method = RequestMethod.GET)
    public String LogFileController.findLogFilesByNumEmploi(@RequestParam("numEmploi") String numEmploi, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("logfiles", LogFile.findLogFilesByNumEmploi(numEmploi).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) LogFile.countFindLogFilesByNumEmploi(numEmploi) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("logfiles", LogFile.findLogFilesByNumEmploi(numEmploi).getResultList());
        }
        addDateTimeFormatPatterns(uiModel);
        return "admin/logfiles/list";
    }
    
}
